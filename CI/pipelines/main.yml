agents:
  queue: cardano-wallet

env:
  LC_ALL: "C.UTF-8"
  NIX_PATH: "channel:nixos-24.11"
  CI_DIR: "./CI"
  CI_SCRIPTS_DIR: "./CI/scripts"
  DOCS_SCRIPT: "nix develop $CI_DIR#docs --command"
  DOCS_TEST_DIR: "./site/docs/test"
  TESTS_SCRIPT: "nix develop $CI_DIR#tests --command"
  CHECKS_SCRIPT: "nix develop $CI_DIR#checks --command"
  linux_agent: "x86_64-linux"
  macos_silicon: "aarch64-darwin"
  macos_intel: "x86_64-darwin"
  macos_agent: "aarch64-darwin"

steps:

  - group: Checks
    depends_on:
      - linux-setup
    key: checks
    steps:
    - label: Check Nix files are formatted
      commands:
        - $CHECKS_SCRIPT $CI_SCRIPTS_DIR/check-nix-format.sh
      agents:
        system: ${linux_agent}
    - label: Check Shell files are formatted
      commands:
        - $CHECKS_SCRIPT $CI_SCRIPTS_DIR/check-shell-format.sh
      agents:
        system: ${linux_agent}
    - label: Nix develop works
      commands:
        - nix develop --command echo "Nix develop works"
      agents:
        system: ${linux_agent}
    - label: Runmd tool works
      commands:
        - nix flake check $CI_SCRIPTS_DIR/runmd
      agents:
        system: ${linux_agent}

  - group: Linux Setup
    depends_on: []
    key: linux-setup
    steps:
    - label: Check Nix (linux)
      key: linux-nix
      commands:
        - nix --version
      agents:
        system: ${linux_agent}

  - group: Linux Artifacts
    key: linux-artifacts
    depends_on:
      - linux-setup
    steps:
    - label: Build Haskell (glibc)
      commands:
        - nix build ./code#cardano-deposit-wallet-transition:exe:cardano-deposit-wallet
      agents:
        system: ${linux_agent}
    - label: Build Haskell (musl)
      commands:
        - nix build ./code#x86_64-unknown-linux-musl:cardano-deposit-wallet-transition:exe:cardano-deposit-wallet
      agents:
        system: ${linux_agent}
    - label: Build package (linux)
      key: linux-package
      commands:
        - nix build .#linux64.package
      artifact_paths:
        - ./result/*
      agents:
        system: ${linux_agent}
    - label: Build Docker Image
      depends_on:
        - linux-package
      commands:
        - $CI_SCRIPTS_DIR/build-docker-image.sh
      artifact_paths:
        - ./result/*
      agents:
        system: ${linux_agent}
    - label: Build Docs
      commands:
        - $DOCS_SCRIPT $CI_SCRIPTS_DIR/build-docs.sh
      agents:
        system: ${linux_agent}

  - group: Linux Tests
    depends_on:
      - linux-artifacts
    steps:
    - label: Smoke Test Linux Package
      commands:
        - $TESTS_SCRIPT $CI_SCRIPTS_DIR/smoke-test-package.sh
      artifact_paths:
        - ./*.log
      agents:
        system: ${linux_agent}
      env:
        PACKAGED_FOR: linux64

  - group: Docs Tests
    depends_on:
      - linux-setup
    steps:
    - block: Run Docs Tests
      depends_on: []
      if: build.branch != "main"
    - label: Test installation from flake instructions(linux64)
      command: |
        export FLAKE=$(pwd)
        $TESTS_SCRIPT $CI_SCRIPTS_DIR/run-md.sh \
            $DOCS_TEST_DIR/build-and-install-package-with-mithril.yml
      agents:
        system: ${linux_agent}
      env:
        PACKAGED_FOR: linux64
    - label: Test installation from package instructions (linux64)
      command: |
        $TESTS_SCRIPT $CI_SCRIPTS_DIR/run-md.sh \
            $DOCS_TEST_DIR/download-and-install-package.yml
      agents:
        system: ${linux_agent}
      env:
        PACKAGED_FOR: linux64
    - label: Test Mithril download (macos-silicon)
      command: |
        $TESTS_SCRIPT $CI_SCRIPTS_DIR/run-md.sh \
            $DOCS_TEST_DIR/download-mithril.yml
      agents:
        system: ${macos_agent}
      env:
        PACKAGED_FOR: macos-silicon
    - label: Test Mithril download (macos-intel)
      command: |
        $TESTS_SCRIPT $CI_SCRIPTS_DIR/run-md.sh \
            $DOCS_TEST_DIR/download-mithril.yml
      agents:
        system: ${macos_agent}
      env:
        PACKAGED_FOR: macos-silicon
    - label: Test installation from flake docs (macos-silicon)
      command: |
        export FLAKE=$(pwd)
        $TESTS_SCRIPT $CI_SCRIPTS_DIR/run-md.sh \
            $DOCS_TEST_DIR/build-and-install-package-without-mithril.yml
      agents:
        system: ${macos_agent}
      env:
        PACKAGED_FOR: macos-silicon
    - label: Test installation from package docs (macos-silicon)
      command: |
        $TESTS_SCRIPT $CI_SCRIPTS_DIR/run-md.sh \
            $DOCS_TEST_DIR/download-and-install-package.yml
      agents:
        system: ${macos_agent}
      env:
        PACKAGED_FOR: macos-silicon
    - label: Test installation from flake docs (macos-intel)
      command: |
        export FLAKE=$(pwd)
        $TESTS_SCRIPT $CI_SCRIPTS_DIR/run-md.sh \
            $DOCS_TEST_DIR/build-and-install-package-without-mithril.yml
      agents:
        system: ${macos_agent}
      env:
        PACKAGED_FOR: macos-intel
        SYSTEM: ${macos_intel}
    - label: Test installation from package docs (macos-intel)
      command: |
        $TESTS_SCRIPT $CI_SCRIPTS_DIR/run-md.sh \
            $DOCS_TEST_DIR/download-and-install-package.yml
      agents:
        system: ${macos_agent}
      env:
        PACKAGED_FOR: macos-intel
    - label: Test installation from dockerhub docker-image
      command: |
        $TESTS_SCRIPT $CI_SCRIPTS_DIR/run-md.sh \
            $DOCS_TEST_DIR/docker-from-release.yml
      agents:
        system: ${linux_agent}
    - label: Test installation from built docker-image
      command: |
        $TESTS_SCRIPT $CI_SCRIPTS_DIR/run-md.sh \
            $DOCS_TEST_DIR/docker-from-flake.yml
      agents:
        system: ${linux_agent}

  - group: Docker Tests
    depends_on:
      - linux-artifacts
    steps:
    - label: Smoke Test Docker Image
      commands:
        - $TESTS_SCRIPT $CI_SCRIPTS_DIR/smoke-test-docker-image.sh
      artifact_paths:
        - ./*.log
      agents:
        system: ${linux_agent}

  - group: MacOS Setup
    depends_on: []
    key: macos-setup
    steps:
    - label: Check Nix (macos)
      key: macos-nix
      commands:
        - nix --version
      agents:
        system: ${macos_agent}

  - group: Macos Artifacts
    key: macos-artifacts
    depends_on:
      - macos-setup
    steps:

    - label: Build Haskell (glibc)
      commands:
        - nix build ./code#cardano-deposit-wallet
      agents:
        system: ${macos_agent}
    - label: Build Package (macos-silicon)
      commands:
        - nix build .#macos-silicon.package
      artifact_paths:
        - ./result/*
      agents:
        system: ${macos_agent}

    - label: Build Package (macos-intel)
      commands:
        - nix build --system ${macos_intel} .#macos-intel.package
      artifact_paths:
        - ./result/*
      agents:
        system: ${macos_agent}

  - group: Macos Tests
    depends_on:
      - macos-artifacts
    steps:
    - label: Smoke Test Macos Silicon Package
      commands:
        - $TESTS_SCRIPT $CI_SCRIPTS_DIR/smoke-test-package.sh
      artifact_paths:
        - ./*.log
      agents:
        system: ${macos_agent}
      env:
        PACKAGED_FOR: macos-silicon

    - label: Smoke Test Macos Intel Package
      commands:
        - nix develop --system ${macos_intel} $CI_DIR#tests --command $CI_SCRIPTS_DIR/smoke-test-package.sh
      artifact_paths:
        - ./*.log
      agents:
        system: ${macos_agent}
      env:
        PACKAGED_FOR: macos-intel